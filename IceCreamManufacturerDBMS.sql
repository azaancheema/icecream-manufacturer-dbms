DROP TABLE has;DROP TABLE Address;DROP TABLE Invoice;DROP TABLE PaymentInformation;DROP TABLE Order_IceCream;DROP TABLE Employee;DROP TABLE Customer;DROP TABLE IceCream;DROP TABLE Flavour;CREATE TABLE Flavour (    Flavour_ID NUMBER PRIMARY KEY,    Flavour_Type VARCHAR2(50) NOT NULL UNIQUE,    Flavour_AllergyInfo VARCHAR2(225),    Flavour_Available VARCHAR2(10) NOT NULL,    Flavour_Description VARCHAR2(255),    Flavour_Ingredients VARCHAR2(255),);CREATE TABLE IceCream (    Icecream_ID NUMBER PRIMARY KEY,    Icecream_FlavourID NUMBER UNIQUE,    Icecream_PricePerUnit DECIMAL(10, 2) DEFAULT 0.0,    Icecream_StockQuantity NUMBER(10) DEFAULT 0,    FOREIGN KEY (Icecream_FlavourID) REFERENCES Flavour(Flavour_ID),);-- Strong Entity: Customer-- Stores customer detailsCREATE TABLE Customer(    Customer_ID VARCHAR2(20) NOT NULL,    Customer_Name VARCHAR2(50) NOT NULL,    Customer_Address_ID VARCHAR2(50) NOT NULL,    Customer_Phone_Number VARCHAR2(15) NOT NULL,    Customer_Email VARCHAR2(30) NOT NULL,    Customer_Payment_ID VARCHAR2(5) NOT NULL,    FOREIGN KEY (Customer_Payment_ID) REFERENCES PaymentInformation(Payment_ID),    FOREIGN KEY (Customer_Address_ID) REFERENCES Address(Address_ID),    PRIMARY KEY (Customer_ID)    );-- Strong Entity: Employee-- Holds personal information about the employeeCREATE TABLE Employee(    Employee_ID VARCHAR2(20) NOT NULL,    Employee_Name VARCHAR2(50) NOT NULL,    Employee_Birth_Date VARCHAR2(15) NOT NULL,    Employee_Role VARCHAR2(60) NOT NULL,    Employee_Email VARCHAR2(30) NOT NULL,    Employee_Phone_Number VARCHAR2(15) NOT NULL,    Employee_Salary DECIMAL(8,2),    Employee_Order_ID VARCHAR2(15),    PRIMARY KEY (Employee_ID));-- Strong Entity: Order (Order_IceCream)-- Holds the orders that the customer placedCREATE TABLE Order_IceCream(    Order_ID VARCHAR2(20) NOT NULL,    Order_Employee_ID VARCHAR2(50) NOT NULL UNIQUE,    Order_IceCream_ID NUMBER NOT NULL UNIQUE,    Order_Payment_ID VARCHAR2(10) NOT NULL UNIQUE,    Order_Order_Status VARCHAR2(20) NOT NULL,    Order_Total_Order DECIMAL(8,2) NOT NULL,    Order_Invoice_ID VARCHAR2(15) NOT NULL UNIQUE,    Order_Date DATE NOT NULL,    Order_Customer_ID VARCHAR2(10) NOT NULL UNIQUE,    FOREIGN KEY (Order_Employee_ID) REFERENCES Employee(Employee_ID),    FOREIGN KEY (Order_IceCream_ID) REFERENCES IceCream_ID(IceCream_ID),    PRIMARY KEY (Order_ID));CREATE TABLE PaymentInformation (    Payment_ID VARCHAR2(50) NOT NULL,              Method_of_Payment VARCHAR2(50) NOT NULL,    Payment_Date DATE NOT NULL,    Payment_Status VARCHAR2(50) NOT NULL,    Payment_Amount DECIMAL(10, 2) NOT NULL,    Customer_ID VARCHAR2(50) UNIQUE,                          Invoice_ID VARCHAR2(50) UNIQUE,                          PRIMARY KEY (Payment_ID));-- Weak Entity: Invoice-- Helps store the bill details which the customer placed an orderCREATE TABLE Invoice (    Invoice_ID VARCHAR2(20) NOT NULL,    Invoice_Order_ID VARCHAR2(20) NOT NULL UNIQUE,    Invoice_Date VARCHAR2(40) NOT NULL,    Invoice_Total_Amount DECIMAL(8,2) NOT NULL,    Invoice_Status VARCHAR2(40) NOT NULL,    Invoice_Customer_ID VARCHAR2(20) NOT NULL UNIQUE,    Invoice_Payment_Information_ID VARCHAR2(50) NOT NULL UNIQUE,    FOREIGN KEY (Invoice_Payment_Information_ID) REFERENCES PaymentInformation(Payment_ID),    FOREIGN KEY (Invoice_Order_ID) REFERENCES Order_IceCream(Order_ID),    FOREIGN KEY (Invoice_Customer_ID) REFERENCES Customer(Customer_ID),    PRIMARY KEY (Invoice_ID));CREATE TABLE Address (    Address_CustomerID VARCHAR2(50) NOT NULL,    Address_Province VARCHAR2(255),    Address_City VARCHAR2(255),    Address_Location VARCHAR2(255),    Address_ID VARCHAR2(50) NOT NULL,    Address_Country VARCHAR2(255),    Address_PostalCode VARCHAR2(255),    PRIMARY KEY (Address_CustomerID, Address_ID),    FOREIGN KEY (Address_CustomerID) REFERENCES Customer(Customer_ID));-- Relationship: between Customer and InvoiceCREATE TABLE has (    Customer_ID VARCHAR2(20) NOT NULL,    Invoice_ID VARCHAR2(20) NOT NULL,    FOREIGN KEY (Customer_ID) REFERENCES Customer(Customer_ID),    FOREIGN KEY (Invoice_ID) REFERENCES Invoice(Invoice_ID),    PRIMARY KEY (Customer_ID, Invoice_ID));-- Populate Tables--Flavour(ID,TYPE,ALLERGY,AVAILABLE, DESCRIPTION, INGREDIENTS)INSERT INTO Flavour VALUES(1, 'Mint Chocolate Chip', 'No nuts', 'Y', 'Fresh minty ice cream with chocolate chips', 'mint, cocoa, ice cream');INSERT INTO Flavour VALUES(2, 'Chocolate', 'May contain Hazel nuts', 'Y', 'Rich chocolate ice cream made from high-quality cocoa', 'cocoa, cream, sugar');INSERT INTO Flavour VALUES(3, 'Vanilla', 'No nuts', 'N', 'Classic vanilla ice cream with a smooth texture', 'vanilla extract, cream, sugar');INSERT INTO Flavour VALUES(4, 'Strawberry', 'No nuts', 'N', 'Fresh strawberry ice cream made with real strawberries', 'strawberries, cream, sugar');INSERT INTO Flavour VALUES(5, 'Cookie Dough', 'May contain nuts', 'Y', 'Delicious ice cream with chunks of cookie dough and chocolate chips', 'cookie dough, chocolate chips, cream');--FINSERT INTO IceCream VALUES(14, 1, 2.29, 1000);INSERT INTO IceCream VALUES(15, 2, 2.49, 800);INSERT INTO IceCream VALUES(16, 3, 2.19, 500);INSERT INTO IceCream VALUES(17, 4, 2.39, 700);INSERT INTO IceCream VALUES(18, 5, 2.59, 600);-- Customer(Customer_ID, Customer_Name, Customer_Address, Customer_Phone_Number, Customer_Email, Customer_Payment_ID)INSERT INTO Customer VALUES('C1', 'Walmart', '341 Yonge St, Toronto, ON M4B71', '647-899-1234', 'walmart@gmail.com', 'P1');INSERT INTO Customer VALUES('C2', 'Shoppers Drug Mart', '15 Wallingford Rd, North York, ON M3G2V1', '647-343-1567', 'sdm@gmail.com', 'P2');INSERT INTO Customer VALUES('C3', 'Costco', '27 Kings College Cir, Toronto, ON M5K1A1', '647-256-1273', 'costco@gmail.com', 'P3');INSERT INTO Customer VALUES('C4', 'Freshco', '300 Borough Dr, Scarborough, ON M1O4P5', '647-999-1415', 'frescho@gmail.com', 'P4');INSERT INTO Customer VALUES('C5', 'Nofrills', '245 Church St, Toronto, ON M1T6W1', '647-766-1322', 'nofrills@gmail.com', 'P5');-- Employee(Employee_ID, Employee_Name, Employee_Birth_Date, Employee_Role, Employee_Email, Employee_Phone_Number, Employee_Salary, Employee_Order_ID)INSERT INTO Employee VALUES ('EM1', 'Vaishnavi', '02/02/1999', 'Production Operator', 'vaishnavi@gmail.com', '647-222-5555', 60000.50, 'R1');INSERT INTO Employee VALUES ('EM2', 'Fatimah', '02/06/1997', 'Flavor Development Specialist', 'fatima@gmail.com', '647-333-5565', 50000.80, 'R2');INSERT INTO Employee VALUES ('EM3', 'Bilal', '17/05/2000', 'Packaging Operator', 'bilal@gmail.com', '647-221-5499', 65000.80, 'R3');INSERT INTO Employee VALUES ('EM4', 'Sayeed', '11/04/1995', 'Food Safety Operator', 'bilal@gmail.com', '647-321-8766', 90000.90, 'R4');INSERT INTO Employee VALUES ('EM5', 'Alexis', '31/09/2000', 'Mainetance Technician', 'alexis@gmail', '647-441-4499', 80000.80, 'R5');-- Order (Order_ID, Order_Employee_ID, Order_Icecream_ID, Order_Payment_ID, Order_Status, Order_Total_Order, Order_Invoice_ID, Order_Date, Order_Customer_ID)INSERT INTO Order_IceCream VALUES('OD1', 'EO1', 1, 'OP1', 'Order Complete', 160.50, 'OIN1', TO_DATE('04/12/2024', 'MM/DD/YYYY'), 'CC1');INSERT INTO Order_IceCream VALUES('OD2', 'EO2', 2, 'OP2', 'Order Pending', 250.25, 'OIN2', TO_DATE('05/12/2023', 'MM/DD/YYYY'), 'CC2');INSERT INTO Order_IceCream VALUES('OD3', 'EO3', 3, 'OP3', 'Order Shipping', 100.05, 'OIN3', TO_DATE('06/17/2024', 'MM/DD/YYYY'), 'CC3');INSERT INTO Order_IceCream VALUES('OD4', 'EO4', 4, 'OP4', 'Order Complete', 170.30, 'OIN4', TO_DATE('01/04/2022', 'MM/DD/YYYY'), 'CC4');INSERT INTO Order_IceCream VALUES('OD5', 'EO5', 5, 'OP5', 'Order Cancelled', 135.95, 'OIN5', TO_DATE('03/19/2019', 'MM/DD/YYYY'), 'CC5');INSERT INTO PaymentInformation VALUES('401R', 'VISA', TO_DATE('02/03/2024', 'MM/DD/YYYY'), 'DONE', 2443.00, '4001', '120E');INSERT INTO PaymentInformation VALUES('402R', 'MasterCard', TO_DATE('02/05/2024', 'MM/DD/YYYY'), 'PENDING', 1500.00, 'AA2', '121E');INSERT INTO PaymentInformation VALUES('403R', 'PayPal', TO_DATE('02/10/2024', 'MM/DD/YYYY'), 'FAILED', 300.50, 'AA3', '122E');INSERT INTO PaymentInformation VALUES('404R', 'American Express', TO_DATE('02/12/2024', 'MM/DD/YYYY'), 'DONE', 750.75, 'AA4', '123E');INSERT INTO PaymentInformation VALUES('405R', 'Debit Card', TO_DATE('02/15/2024', 'MM/DD/YYYY'), 'DONE', 120.00, 'AA5', '124E');-- Invoice (Invoice_ID, Invoice_Order_ID, Invoice_Date, Invoice_Total_Amount, Invoice_Status, Invoice_Customer_ID, Invoice_Payment_Information_ID)-- Now you can insert into InvoiceINSERT INTO Invoice VALUES ('OIN1', 'OD1', '06/01/2024', 160.50, 'Paid', 'C1', 'P1');INSERT INTO Invoice VALUES ('OIN2', 'OD2', '07/01/2024', 250.25, 'Pending', 'C2', 'P2');INSERT INTO Invoice VALUES ('OIN3', 'OD3', '06/01/2024', 90.10, 'Paid', 'C3', 'P3');-- Address(CustomerID, AddressID, Country, Province, City, Location, PostalCode)INSERT INTO Address VALUES('C1', '4001', 'Canada', 'Ontario', 'Toronto', '341 Bloor St E', 'L6V 4T3');INSERT INTO Address VALUES('C2', '4002', 'Canada', 'Ontario', 'Toronto', '123 King St W', 'M5H 1K4');INSERT INTO Address VALUES('C3', '4003', 'Canada', 'Ontario', 'Mississauga', '456 Main St N', 'L5B 1M4');INSERT INTO Address VALUES('C4', '4004', 'Canada', 'Ontario', 'Ottawa', '789 Elm St S', 'K1A 0B1');INSERT INTO Address VALUES('C5', '4005', 'Canada', 'Ontario', 'Hamilton', '321 Maple Ave', 'L8P 1B5');-- hasINSERT INTO has VALUES('C1', 'OIN1');INSERT INTO has VALUES('C2', 'OIN2');INSERT INTO has VALUES('C3', 'OIN3');UPDATE EMPLOYEE SET EMPLOYEE_ORDER_ID = 'OD1' WHERE employee_id = 'EM1';UPDATE EMPLOYEE SET EMPLOYEE_ORDER_ID = 'OD2' WHERE employee_id = 'EM2';--UPDATE CUSTOMER SET CUSTOMER_EMAIL = 'walmart@gmail.com' WHERE customer_email = 'azaan@gmail.com';--UPDATE CUSTOMER SET CUSTOMER_EMAIL = 'sdm@gmail.com' WHERE customer_email = 'maryam@gmail.com';--UPDATE CUSTOMER SET CUSTOMER_EMAIL = 'costco@gmail.com' WHERE customer_email = 'dan@gmail.com';--UPDATE CUSTOMER SET CUSTOMER_EMAIL = 'freshco@gmail.com' WHERE customer_email = 'susan@gmail.com';--UPDATE CUSTOMER SET CUSTOMER_EMAIL = 'nofrills@gmail.com' WHERE customer_email = 'ali@gmail.com';--ASSIGNMENT 4a (Simple Queries)-- Simple Query 1-- Display all ice cream flavours that have no nuts.SELECT DISTINCT    Flavour_ID as "Flavour_ID",    Flavour_Type as "Flavour Type"FROM FlavourWHERE Flavour_AllergyInfo = 'No nuts'-- Simple Query 2--Displays the data of the staff from Employee IDSELECTEmployee_ID as "Employee ID",Employee_Name as "Employee Name",Employee_Birth_Date as "Birth Date",Employee_Role as "Role",Employee_Email as "Email",Employee_Phone_Number as "Phone Number",Employee_Salary as "Salary",Employee_Order_ID as "Order_ID"FROM EmployeeORDER BY Employee_ID;-- Simple Query 3-- Display all Stock Quantities (ice creams) that are greater than or equal to 700SELECT *FROM IceCreamWHERE IceCream_StockQuantity >= 700;-- Simple Query 4-- Displays all customers with active ordersSELECT o.Order_ID,o.Order_Total_OrderFROM Order_IceCream oWHERE o.Order_Order_Status IN ('Order Complete', 'Order Pending', 'Order Shipping')ORDER BY o.Order_ID ASC; --will show the orders in Order ID Ascending order-- Simple Query 5--show all invoices along +  payment status.SELECT DISTINCT    Invoice_ID as "Invoice ID",    Invoice_Total_Amount as "Total Amount",    Invoice_Status as "Payment Status"FROM InvoiceORDER BY Invoice_ID;-- Simple Query 6--all employees who are Production Operator.SELECT    Employee_ID as "Employee ID",    Employee_Name as "Employee Name",    Employee_Salary as "Salary"FROM EmployeeWHERE Employee_Role = 'Production Operator'ORDER BY Employee_Name;-- Simple Query 7-- Stores information about the customer's (store) addressSELECT    Address_CustomerID as "Customer ID",    Address_ID as "Address ID",    Address_Country as "Country",    Address_Location as "Location",    Address_Province as "Province",    Address_City as "City",    Address_PostalCode as "Postal Code"   FROM AddressORDER BY Address_ID;-- Simple Query 8-- Payment Information- Constraints for VisaSELECT    Customer_ID as "Customer ID",    Invoice_ID as "Invoice ID",    Payment_ID as "Payment ID",    Method_of_Payment as "Payment Method",    Payment_Date as "Payment Date",    Payment_Amount as "Payment Amount",    Payment_Status as "Payment Status"FROM PaymentInformationWHERE Method_of_Payment = 'VISA'ORDER BY Payment_Date-- Simple Query 9-- Gives information about the number of employees there are.SELECT    Employee_Role as "Role",    COUNT(Employee_ID) as " Total Number of Employees"FROM EmployeeGROUP BY Employee_Role--ASSIGNMENT 4b (Advanced Queries and Views)------FLAVOUR TABLE--All flavours that cost more than the average price of all the ice creamsSELECT f.Flavour_Type, ic.Icecream_PricePerUnit --ic is aliased in the next lineFROM Flavour fJOIN IceCream ic ON f.Flavour_ID = ic.Icecream_FlavourIDWHERE ic.Icecream_PricePerUnit > (    SELECT AVG(Icecream_PricePerUnit)    FROM IceCream);--Top 3 flavours that contain the MOST amount of ingredientsSELECT *FROM (    SELECT f.Flavour_Type,           LENGTH(f.Flavour_Ingredients) - LENGTH(REPLACE(f.Flavour_Ingredients, ',', '')) + 1 AS ingredientCount    FROM Flavour f    ORDER BY ingredientCount DESC)WHERE ROWNUM <= 3; --CHANGE THE 3 HERE TO GET MORE VALUES------ICE CREAM TABLE--Top 3 ice creams with the highest amount of in stock quantitySELECT *FROM (    SELECT ic.Icecream_ID, f.Flavour_Type, ic.Icecream_StockQuantity    FROM IceCream ic    JOIN Flavour f ON ic.Icecream_FlavourID = f.Flavour_ID    ORDER BY ic.Icecream_StockQuantity DESC)WHERE ROWNUM <= 3;-- the price of each ice cream, and how much more or less it is than the averageSELECT f.Flavour_Type, ic.Icecream_PricePerUnit,       (ic.Icecream_PricePerUnit - (SELECT AVG(Icecream_PricePerUnit) FROM IceCream)) AS priceDifference --we can simply use the AVG function here to get the averagesFROM IceCream icJOIN Flavour f ON ic.Icecream_FlavourID = f.Flavour_ID;------EMPLOYEE TABLE-- how much salary is earned by each role?SELECT e.Employee_Role, SUM(e.Employee_Salary) AS totalSalaryFROM Employee eGROUP BY e.Employee_RoleORDER BY totalSalary ASC;--which employees are slacking? i.e which employess have not been assigned any orders?SELECT e.Employee_NameFROM Employee eWHERE NOT EXISTS (    SELECT 1    FROM Order_IceCream oi    WHERE oi.Order_Employee_ID = e.Employee_ID);--TOTAL revenue generated by ALL payment methodSELECT pi.Method_Of_Payment, SUM(pi.Payment_Amount) AS totalRevenueFROM PaymentInformation piGROUP BY pi.Method_Of_PaymentORDER BY totalRevenue ASC;------ADDRESS TABLE--CUSTOMERS with a relatively similiar postal code, this is to determine which customers are located closer to each otherSELECT SUBSTR(a.Address_PostalCode, 1, 3) AS postalArea, c.Customer_NameFROM Address aJOIN Customer c ON a.Address_CustomerID = c.Customer_IDWHERE ROWNUM <= 3ORDER BY SUBSTR(a.Address_PostalCode, 1, 3), c.Customer_Name;--COUNT the number of customers per city and show their names separated by commasSELECT a.Address_City, COUNT(*) AS customerCount, LISTAGG(c.Customer_Name, ', ') WITHIN GROUP (ORDER BY c.Customer_Name) AS customerNamesFROM Address aJOIN Customer c ON a.Address_CustomerID = c.Customer_IDGROUP BY a.Address_CityORDER BY customerCount DESC;--Finding ALL orders that cost more than the average of all the ordersSELECT oi.Order_ID, oi.Order_Total_OrderFROM Order_IceCream oiWHERE oi.Order_Total_Order > (    SELECT AVG(oi2.Order_Total_Order)    FROM Order_IceCream oi2)ORDER BY oi.Order_Total_Order DESC;------INVOICE TABLE--Top 3 oldest UNPAID invoices, this will include the canceled invoices tooSELECT *FROM (    SELECT i.Invoice_ID, i.Invoice_Date, i.Invoice_Status    FROM Invoice i    WHERE i.Invoice_Status != 'Paid'    ORDER BY TO_DATE(i.Invoice_Date, 'DD/MM/YYYY') ASC)WHERE ROWNUM <= 3;--Total paid invoices for each monthSELECT EXTRACT(MONTH FROM TO_DATE(i.Invoice_Date, 'DD/MM/YYYY')) AS invoiceMonth, SUM(i.Invoice_Total_Amount) AS totalPaidFROM Invoice iWHERE i.Invoice_Status = 'Paid'GROUP BY EXTRACT(MONTH FROM TO_DATE(i.Invoice_Date, 'DD/MM/YYYY'))ORDER BY invoiceMonth;---------Views--Displays employees that have a high salary (salary > 70000)CREATE VIEW Employee_High_Salary ASSELECT Employee_Name, Employee_SalaryFROM EmployeeWHERE Employee_Salary > 70000;--Displays the customers whose order is completeCREATE VIEW Orders_Complete ASSELECT Order_ID, Order_Order_StatusFROM Order_IceCreamWHERE Order_Order_Status = 'Order Complete';--Display table: display the top 3 oldest unpaid invoices.CREATE VIEW Unpaid_Invoices ASSELECT Invoice_ID, Invoice_Date, Invoice_StatusFROM InvoiceWHERE Invoice_Status != 'Paid'ORDER BY TO_DATE(Invoice_Date, 'DD/MM/YYYY') ASC;--Display table: Ontario based addressesCREATE VIEW Canceled_Orders ASSELECT    Order_ID,    Order_Employee_ID,    Order_Icecream_ID,    Order_Payment_ID,    Order_Total_Order,    Order_Invoice_ID,    Order_Date,    Order_Customer_IDFROM    Order_IceCreamWHERE    Order_Order_Status = 'Order Cancelled';      -- Interesting Queries:--INTERESTING QUERIES--Interesting Query 1-- UNION, COUNT, MINUS, EXIST, HAVINGSELECT    C.Customer_Name AS "Customer Name",    C.Customer_Email AS "Customer Email",    COUNT(O.Order_ID) AS "Total Orders",    AVG(O.Order_Total_Order) AS "Average Order Value"FROM    Customer CJOIN    Order_IceCream O ON C.Customer_ID = O.Order_Customer_IDWHERE    O.Order_Order_Status = 'Order Complete'GROUP BY    C.Customer_Name, C.Customer_EmailHAVING    COUNT(O.Order_ID) > 0;--Interesting Query 2SELECT    C.Customer_Name AS "Customer Name",    SUM(O.Order_Total_Order) AS "Total Spent"FROM    Customer CJOIN    Order_IceCream O ON C.Customer_ID = O.Order_Customer_IDGROUP BY    C.Customer_NameHAVING    SUM(O.Order_Total_Order) > 100;-- Interesting Query 3SELECT    F.Flavour_Type AS "Flavour Type",    COUNT(O.Order_ID) AS "Number of Orders",    AVG(I.Icecream_PricePerUnit) AS "Average Price"FROM    Flavour FJOIN    IceCream I ON F.Flavour_ID = I.Icecream_FlavourIDJOIN    Order_IceCream O ON O.Order_IceCream_ID = I.Icecream_IDGROUP BY    F.Flavour_Type;--Interesting Query 4SELECT    C.Customer_Name AS "Customer Name",    COUNT(O.Order_ID) AS "Number of Orders",    SUM(O.Order_Total_Order) AS "Total Spent"FROM    Customer CJOIN    Order_IceCream O ON C.Customer_ID = O.Order_Customer_IDJOIN    PaymentInformation P ON O.Order_Payment_ID = P.Payment_IDGROUP BY    C.Customer_Name;   --Interesting Query 5SELECT    C.Customer_Name AS "Customer Name",    COUNT(DISTINCT I.Icecream_FlavourID) AS "Unique Flavors Ordered"FROM    Customer CJOIN    Order_IceCream O ON C.Customer_ID = O.Order_Customer_IDJOIN    IceCream I ON O.Order_IceCream_ID = I.Icecream_IDGROUP BY    C.Customer_Name;SELECT    C.Customer_Name AS "Customer Name",    C.Customer_Email AS "Customer Email",    COUNT(O.Order_ID) AS "Total Orders",    AVG(O.Order_Total_Order) AS "Average Order Value"FROM    Customer CJOIN    Order_IceCream O ON C.Customer_ID = O.Order_Customer_IDWHERE    EXISTS (        SELECT 1        FROM Invoice I        WHERE I.Invoice_Customer_ID = C.Customer_ID    )GROUP BY    C.Customer_Name, C.Customer_EmailHAVING    COUNT(O.Order_ID) > 1UNION-- Use UNION to include customers with no completed orders but still in the customer tableSELECT    C.Customer_Name,    C.Customer_Email,    0 AS "Total Orders",    0 AS "Average Order Value"FROM    Customer CWHERE    NOT EXISTS (        SELECT 1        FROM Order_IceCream O        WHERE O.Order_Customer_ID = C.Customer_ID    )MINUS-- Use MINUS to exclude customers who haven't made any ordersSELECT    C.Customer_Name,    C.Customer_Email,    COUNT(O.Order_ID),    AVG(O.Order_Total_Order)FROM    Customer CJOIN    Order_IceCream O ON C.Customer_ID = O.Order_Customer_IDWHERE    O.Order_Order_Status = 'Completed'GROUP BY    C.Customer_Name, C.Customer_Email;-- NUMBER 2-- Retrieve customers who have completed at least one order with total amount spent and filter those who spent more than $100SELECT    C.Customer_Name AS "Customer Name",    C.Customer_Email AS "Customer Email",    COUNT(O.Order_ID) AS "Number of Orders",    SUM(O.Order_Total_Order) AS "Total Spent"FROM    Customer CJOIN    Order_IceCream O ON C.Customer_ID = O.Order_Customer_IDWHERE    EXISTS (        SELECT 1        FROM PaymentInformation P        WHERE P.Payment_ID = O.Order_Payment_ID        AND P.Payment_Status = 'Completed'    )GROUP BY    C.Customer_Name, C.Customer_EmailHAVING    SUM(O.Order_Total_Order) > 100UNION-- Include customers with no orders in the result setSELECT    C.Customer_Name,    C.Customer_Email,    0 AS "Number of Orders",    0 AS "Total Spent"FROM    Customer CWHERE    NOT EXISTS (        SELECT 1        FROM Order_IceCream O        WHERE O.Order_Customer_ID = C.Customer_ID    )MINUS-- Exclude customers with incomplete paymentsSELECT    C.Customer_Name,    C.Customer_Email,    COUNT(O.Order_ID),    SUM(O.Order_Total_Order)FROM    Customer CJOIN    Order_IceCream O ON C.Customer_ID = O.Order_Customer_IDJOIN    PaymentInformation P ON O.Order_Payment_ID = P.Payment_IDWHERE    P.Payment_Status != 'Completed'GROUP BY    C.Customer_Name, C.Customer_Email;--Interesting Query 1: UNIONSELECT    Flavour_Type AS NameFROM    FlavourUNIONSELECT    Customer_Name AS NameFROM    Customer;   -- Interesting Query 2: EXISTS-- Displays flavours that might have Hazel nuts.SELECT DISTINCT    f.Flavour_ID AS "Flavour_ID",    f.Flavour_Type AS "Flavour Type"FROM Flavour fWHERE EXISTS (    SELECT 1    FROM Flavour f2    WHERE f2.Flavour_ID = f.Flavour_ID    AND f2.Flavour_AllergyInfo = 'May contain Hazel nuts');-- Interesting Query 3: COUNT-- Displays the invoices of every payment status and orders the results through descending orderSELECT    Invoice_Status as "Payment Status",    COUNT(Invoice_ID) as "Number of Invoices"FROM InvoiceGROUP BY Invoice_StatusORDER BY "Number of Invoices" DESC;-- Interesting Query 4: MINUS-- Displays the invoices based on payment status except for PaidSELECT    Invoice_Status as "Payment Status",    COUNT(Invoice_ID) as "Number of Invoices"FROM InvoiceGROUP BY Invoice_StatusMINUSSELECT    Invoice_Status as "Payment Status",    COUNT(Invoice_ID) as "Number of Invoices"FROM InvoiceWHERE Invoice_Status = 'Paid'GROUP BY Invoice_StatusORDER BY "Number of Invoices" DESC;-- Interesting Query 5: HAVING-- Displays The employees who do not have any orders assignedSELECT    e.Employee_NameFROM    Employee eLEFT JOIN    Order_IceCream oi ON e.Employee_ID = oi.Order_Employee_IDGROUP BY    e.Employee_NameHAVING    COUNT(oi.Order_ID) = 0;